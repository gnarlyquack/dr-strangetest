Unreleased
==========

Added
-----
- Provide EasyTest as a Phar.
- Show the memory used during a test run.
- Support test dependencies: a test can declare a dependency on other tests
  and will only be run if all the tests it depends on pass.
- Add 'setup_run' and 'teardown_run' to manage test fixture for each
  parameterized test run.
- Allow limiting a test run to individual functions, classes, and/or methods
  within a test suite.

Changed
-------
- Match directory setup and teardown fixtures on just 'setup' and 'teardown'.
- Match function setup and teardown fixtures on just 'setup' and 'teardown'.

Removed
-------
- Remove easytest\Context::subtest()

Fixed
-----
- Argument lists returned from directory and file setup functions can be any
  iterable.
- Show object instance IDs to distinguish equal but non-identical objects.
- Generate accurate diffs for loosely-compared values.
- Consistently determine the root test directory.
- File parsing handles non-class and non-function definitions and statements.



0.3.0 (2020-05-12)
==================

Added
-----
- Support PHP versions 5.3 through 7.4.
- Add 'verbose' and 'quiet' output modes with 'quiet' being the default.
- Add additional assertions and easytest\fail().
- Enable 'assert.exception' by default for PHP >= 7.2.
- Add informational CLI options: 'version' and 'help'.
- Show the length of the test run in seconds.
- Add test functions and accompanying setup and teardown functions.
- Add file setup and file teardown functions.
- Allow directory setup and file setup functions to run tests multiple times
  with different sets of parameters.
- Implement subtests and test-specific teardown using a (new) Context object
  that is passed to each test function and method.

Changed
-------
- Rename easytest\assert_exception() to easytest\assert_throws().
- Implement directory setup and teardown as functions which are discovered in
  'setup.php'. 'teardown.php' is no longer needed.
- Replace test loaders and the old Context object (which allowed test state to
  be saved and shared between tests) with parameterized fixture functions and
  tests: fixture functions return iterables of arguments which are supplied as
  parameters to subordinate fixture functions and tests.
- Improve(?) the formatting of the test report.
- Show a failed assertion's description along with the assertion expression
  instead of in place of it.
- Rename setup_class and teardown_class to setup_object and teardown_object.
- Any exception thrown during file inclusion, including a skip, is an error.

Removed
-------
- No longer parse and format assertion strings (deprecated by PHP 7.2).

Fixed
-----
- Show debug information (file, line number, backtrace) for failed tests.
- Run test methods and their setup() and teardown() functions in a common
  output buffer. Output buffers can now be started in setup() and deleted in
  teardown().
- No longer discover tests that haven't actually been defined because of a
  failed conditional expression.
- Only ever include a file once during a test run.
- Handle empty strings correctly in easytest\diff().
- Report all errors found during discovery instead of just the first one.



0.2.2 (2015-12-20)
==================

Fixed
-----
- Output the correct version number.



0.2.1 (2015-12-19)
==================

Added
-----
- Support PHP 7.0.
- Load Composer's autoload.php file.



0.2.0 (2014-12-12)
==================

Changed
-------
- setup(), teardown(), and test methods are now executed in separate buffers.
- Report an error if the test loader does not return an object instance.

Fixed
-----
- Output is reported when it occurs in conjunction with an exception.



0.1.0 (2014-12-10)
==================

Initial release.

Added
-----
- Support PHP 5.4, 5.5, and 5.6.
- Test cases are implemented as plain old PHP objects.
- Test are automatically discovered from directories and files by naming
  convention.
- Make assertions with PHP's built-in assert() function.
- Fixtures are supported at the test method, class, and directory level.
- Non-executable tests can be skipped.
- Custom test loaders allow instantiation of test cases with dependencies.
- Test cases can be namespaced.
- Output is buffered and included in the test report.
- Installation via Composer.
