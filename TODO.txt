TODO
====

This file lists all tasks required for the next release. Items that might be
desirable for future releases may be listed at the bottom of the file.


Release
-------
-   Review test suite

-   Niggles to test/check:

    -   What happens if we try to tokenize an empty file?

    -   Do we properly handle directories whose name matches against file name
        patterns?

    -   Do we properly handle traversing towards a target that may have a
        potentially ambiguous directory name in the path? E.g., the target is
        in "tests/test_foobar/test_target.php" and the test suite also has the
        directory "tests/test_foo" (which may or may not also include a file
        "test_target.php")

    -   Do we not discover/traverse symbolic links?

    -   Do we handle traversing multiple times to a directory, file, etc. that
        had a setup error?

    -   (Directory) setup errors when there are targets

    -   Running targets that are a directory or a file that is parameterized
        with multiple argument lists, and/or in a directory hierarchy where
        one or more directories in the hierarchy are parameterized with
        multiple argument lists

    -   Error-checking for argument lists:
        -   setup fixtures must either return an iterable or an instance of
            ArgumentLists
        -   each arglist in ArgumentLists must be an iterable

    -   Accessing unset dependency state

-   Clean up targets:
    -   find_class_target: don't use 'method_exists' to check if a target
        exists because this will cause non-test methods to be found as targets

    -   Allow namespaces for user-provided function and class targets to be
        automatically discovered so they don't need to be specified on the
        command line. This will probably require caching the list of declared
        namespaces within a file test

    -   User targets only need to be found/validated once during discovery and
        not every time a test is run. Targets built from dependencies should
        never need to be found/validated since they should always be valid

-   Fix run names so that they don't have to start with a space

-   Either both or neither of log_skip and log_output should have a default
    $during_error?

-   Ensure each individual arglist is an array

-   Cleanup parameters to setup(), teardown(), run() test methods

-   Ensure ClassTest instances are deleted

-   Set maximum PHP constraint in composer.json

-   Add support for config files(?)

-   Implement additional CLI options(?)
    -   specify a config file
    -   reverse report output
    -   enable/disable autoloading, and specify an autoloader file location?

-   Ensure we're UTF-8 conformant
    https://www.php.net/manual/en/migration71.windows-support.php#migration71.windows-support.long-and-utf8-path

-   Migrate from Travis to GitHub Actions

-   Test PHP 8 support

-   Replace switches with if statements (to enforce strict comparison)

-   Clean up diff and formatting

    -   The code seems to work, but it's hella inefficient. As one example,
        the LCS matrix is calculated twice when comparing composite
        sub-values: once to determine the LCS for the comparison and again to
        generate the diff. Many things like this can probably be cleaned up
        and made more efficient, and the code can perhaps be better organized

        -   Do we want to split up formatting and diff (and perhaps additional
            "utility" functions) into separate files?

    -   Since we're now diffing values directly instead of using a string
        representation, formatting needs more robust testing and review. At
        the very least, we want to ensure that the formatting of whole,
        composite values by format_variable() matches how individual elements
        are formatted when appearing within a diff

        -   Are we happy with how strings are formatted? Formatting them after
            breaking them into multiple lines means that each line is now
            enclosed in quotes. This seems unpleasantly noisy, but offhand,
            it's now clear how we can avoid this. Also, we should probably
            take a closer look at how strings are formatted when inside
            another container (i.e., as a class property or array element)

        -   We lost the commas that separate array elements. Do we want them
            back?

        -   We need to take a closer look at how classes are formatted

    -   Implement "loose" (==) comparison

    -   By default, don't treat numerical array keys as significant when
        comparing arrays. This can give us cleaner diffs, since an insert or
        deletion won't cause all the subsequent, reindexed elements to show as
        having been changed. The user should be able to override this so that
        keys are always considered significant

    -   Since we can now support loose comparison, can we incorporate
        the fact that array key order isn't significant without explicitly
        ordering the array? Even if we can't, do we want arrays to be
        automatically sorted as part of generating the diff instead of
        depending on having sorted arrays passed in?


Future / Wishlist
-----------------
-   Improve diff algorithm
    -   "a high-performance library in multiple languages that manipulates
        plain text"
        https://github.com/google/diff-match-patch

    -   "Utility to do an N-way diff and N-way merge, for N > 2"
        https://github.com/Quuxplusone/difdef

    -   Limit number of lines that are reported before and after the differing
        portion of text?

-   Support calling assert() with arbitrary exceptions in PHP >= 7? It's not
    entirely clear what this would even entail: perhaps allow treating custom
    exceptions as failures instead of errors?

-   Allow targeting of a specific parameterized test run?

-   Allow test functions and function fixtures to be moved into a class and
    "just work"?

-   Support "higher-level" dependencies, i.e., declaring a dependency on an
    entire class, file, or directory, all of whose tests must pass in order
    for the dependency to be satisfied
