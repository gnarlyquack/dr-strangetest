TODO
====

This file lists all tasks required for the next release. Items that might be
desirable for future releases may be listed at the bottom of the file.


Release
-------
-   Review test suite

-   Niggles to test/check:

    -   What happens if we try to tokenize an empty file?

    -   Do we properly handle directories whose name matches against file name
        patterns?

    -   Do we properly handle traversing towards a target that may have a
        potentially ambiguous directory name in the path? E.g., the target is
        in "tests/test_foobar/test_target.php" and the test suite also has the
        directory "tests/test_foo" (which may or may not also include a file
        "test_target.php")

    -   Do we handle traversing multiple times to a directory, file, etc. that
        had a setup error?

    -   (Directory) setup errors when there are targets

    -   Running targets that are a directory or a file that is parameterized
        with multiple argument lists, and/or in a directory hierarchy where
        one or more directories in the hierarchy are parameterized with
        multiple argument lists

-   Targets:

    -   Allow namespaces for user-provided function and class targets to be
        automatically discovered so they don't need to be specified on the
        command line. This will probably require caching the list of declared
        namespaces within a file test

    -   Class and function targets should be found without regard to case
        since PHP identifiers are case-insensitive. Presumably, this isn't an
        issue with paths since we're validating all user-provided paths with
        realpath()?

-   Add support for config files(?)

-   Implement additional CLI options(?)
    -   enable/disable autoloading, and specify an autoloader file location?

-   Ensure we're UTF-8 conformant
    https://www.php.net/manual/en/migration71.windows-support.php#migration71.windows-support.long-and-utf8-path

-   Diffs and formatting

    -   Cache LCS matrices so they don't need to be recalculated when
        generating the diff

    -   Split up formatting and diff (and perhaps additional "utility"
        functions) into separate files

    -   Ensure that values formatted in whole by format_variable() match
        how values are formatted when individual elements are diffed

    -   By default, don't treat keys in arrays that are lists as significant
        when diffing arrays. This can give us cleaner diffs, since an insert or
        deletion won't cause all the subsequent, reindexed elements to show as
        having been changed. The user should be able to override this so that
        keys are always considered significant.

    -   When formatting array and class "headers", it seems we could have a
        non-compact diff if both the keys of the header and initial values are
        different:
            - 1 => array(
            + 2 => array(
            -   1 => 'foo',
            +   1 => 'bar',
        Is this something we want to try to "fix"?

    -   If the only difference between two composite values is their key, then
        we only need to diff the first line of each and can then copy the rest

-   Any event that is logged using a string as the reason (as opposed to using
    an exception as the reason) will not have a backtrace identifying the
    source file name and line number. To the extent that it's possible, we
    probably want to always log an event using an exception as the reason.

-   Should we strip assert() calls (and potentially other debug activity) when
    building the phar? Since Dr. Strangetest requires assertions to be enabled,
    they will always be executed even though we would never expect them to
    trigger in a production release. If so, then we probably want to allow the
    phar version to be installable with Composer (a la psalm/phar, for example)

-   The comparison assertions ('<', '<=', '>', '>=') can operate
    (successfully) on (some) composite values. What implications does this
    have on formatting failure messages?
    https://www.php.net/manual/en/language.operators.comparison.php

-   Dependencies:

    -   Do we handle declaring a dependency on one's self?

    -   Names given to Context::depend_on() should respect the current
        namespace scope and any 'use ...' statements. One exception is
        providing a function name from inside a class definition. In this case,
        we should automatically fallback to the current class, but prefixing
        the name with '::' should apply normal name resolution rules.

-   Test parameterization

    -   Test validation of argument lists returned by directory setup

    -   Test teardown_run for directories, including handling of multiple
        teardown_run functions

    -   Test setup_run for files, including handling of multiple setup_run
        functions

    -   Test setup_run for directories, including handing of multiple
        setup_run functions

-   Test that we don't skip any tokens when parsing files. In many cases,
    whitespace is optional, so an off-by-one error when iterating through the
    tokens means we could potentially miss a definition.

-   Only show file name and line number in stack traces

-   How do we (and should we) handle calling user functions with bad
    signatures, i.e., fixture functions or test functions with extraneous
    parameters and/or incorrect type declarations?


Future / Wishlist
-----------------
-   Improve diff algorithm
    -   "a high-performance library in multiple languages that manipulates
        plain text"
        https://github.com/google/diff-match-patch

    -   "Utility to do an N-way diff and N-way merge, for N > 2"
        https://github.com/Quuxplusone/difdef

    -   Limit number of lines that are reported before and after the differing
        portion of text?

-   Support calling assert() with arbitrary exceptions in PHP >= 7? It's not
    entirely clear what this would even entail: perhaps allow treating custom
    exceptions as failures instead of errors?

-   Support "higher-level" dependencies, i.e., declaring a dependency on an
    entire class, file, or directory, all of whose tests must pass in order
    for the dependency to be satisfied. This probably means we want setup
    fixtures to be able to declare dependencies (and retrieve state), and
    teardown fixtures to be able to set state.
