TODO
====

This file lists all tasks required for the next release. Items that might be
desirable for future releases may be listed at the bottom of the file.


Release
-------
-   Distribute EasyTest as a single executable (Phar?)

-   Finish implementing CLI argument parsing
    -   Combined short options
    -   Options with arguments
    -   '-' ends option parsing and is included with any remaining arguments
    -   '--' ends option parsing and is excluded from any remaining arguments

-   Implement CLI options
    -   version
    -   help

-   Fix handling of empty strings in diff class

-   Ensure path discovery is OS independent

-   Support PHP >= 5.3(?)
    -   Short array syntax ([]) isn't supported
    -   Closures don't have access to $this

-   Test discovery: For all tests, first check the reporter, then the context,
    then the runner

-   Ensure we're UTF-8 conformant
    https://www.php.net/manual/en/migration71.windows-support.php#migration71.windows-support.long-and-utf8-path

-   Improve(?) test report(?)

-   assert_throws(): provide better diagnostics when an unexpected
    exception is caught

-   When using a message/description for an assertion, consider showing the
    message in addition to, not in place of, the assertion expression

-   Implement additional assertions?
    -   assert_preg_match
    -   assert_isset

-   Test installing and running via Composer/Packagist

-   Report how long test runs take

-   _format_exception_string: bulletproof the check to filter out calls within
    Easytest

    -   If we execute a passed-in callable that generates a failure (see
        assert_throws), and the callable is a function with an identifier
        (i.e., not an anonymous function), it seems we could potentially call
        any function within easytest and match on it, which could cause us to
        break out of trace generation too early. So we need to match on
        something that we would never expect to execute as part of a test (or
        a fixture, see below).

    -   Stop showing call traces within EasyTest when skip is called in a
        class-level (or higher) fixture (perhaps just don't generate a call
        trace for skips at all?)

-   Make diff output more compact?
    Instead of showing "- expected" and "+ actual" as prefixes to the diff,
    maybe include them as part of the diff, e.g.: "- $expected = x" and
    "+ $actual = y", where 'x' and 'y' is the first line of the diff

-   When trying to load Composer, only check the path(s) the autoloader would
    be if EasyTest had been installed via Composer(?). I.e., since EasyTest
    itself doesn't require Composer, we (might) never want/need to try loading
    Composer from our own source tree.

-   Do we only want to skip teardown if we skipped setup? I.e., should we
    teardown after an error in setup? It seems like this is the only way to
    clean up potentially-dangling resources.

-   How should we handle the potential deletion of our output buffer by the
    user? Certainly this would seem to be a possibility.

-   When processing test case methods, report all errors. Right now we report
    the first error and then bail.

    -   Also see how we're handling this when processing directories and files

-   Rename setup/teardown_class, since these methods are actually operating on
    instantiated class instances


Future
------
-   Add support for config files(?)

-   Implement CLI options(?)
    -   specify a config file
    -   reverse report output

-   Fix TestDiscovery tests so that they don't depend on the order in which
    tests are run

-   Add additional verbosity level? The bulk of our discovery tests works by
    generating output and then checking for it in the test log, which seems a
    little janky

-   Cache results of directory (and file?) discovery

-   diff: Limit number of lines that are reported before and after the
    differing portion of text

-   Implement "loose" diff/variable formatting for "loose" (==) comparisons?


Wishlist / Someday(?)
---------------------
-   Implement data generators/subtests

-   Improve diff algorithm
    -   "a high-performance library in multiple languages that manipulates
        plain text"
        https://github.com/google/diff-match-patch

    -   "Utility to do an N-way diff and N-way merge, for N > 2"
        https://github.com/Quuxplusone/difdef

-   Support calling assert() with arbitrary exceptions in PHP >= 7? It's not
    entirely clear what this would even entail: perhaps allow for outputting
    custom types of errors/failures?
