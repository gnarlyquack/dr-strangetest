TODO
====

This file lists all tasks required for the next release. Items that might be
desirable for future releases may be listed at the bottom of the file.


Release
-------
-   Implement additional assertions?
    -   assert_preg_match
    -   assert_isset

-   Test installing and running via Composer/Packagist

-   Report how long test runs take

-   _format_exception_string: bulletproof the check to filter out calls within
    Easytest

    -   If we execute a passed-in callable that generates a failure (see
        assert_throws), and the callable is a function with an identifier
        (i.e., not an anonymous function), it seems we could potentially call
        any function within easytest and match on it, which could cause us to
        break out of trace generation too early. So we need to match on
        something that we would never expect to execute as part of a test (or
        a fixture, see below).

    -   Stop showing call traces within EasyTest when skip is called in a
        class-level (or higher) fixture (perhaps just don't generate a call
        trace for skips at all?)

-   Make diff output more compact?
    Instead of showing "- expected" and "+ actual" as prefixes to the diff,
    maybe include them as part of the diff, e.g.: "- $expected = x" and
    "+ $actual = y", where 'x' and 'y' is the first line of the diff

-   When trying to load Composer, only check the path(s) the autoloader would
    be if EasyTest had been installed via Composer(?). I.e., since EasyTest
    itself doesn't require Composer, we (might) never want/need to try loading
    Composer from our own source tree.

-   Do we only want to skip teardown if we skipped setup? I.e., should we
    teardown after an error in setup? It seems like this is the only way to
    clean up potentially-dangling resources.

-   How should we handle the potential deletion of our output buffer by the
    user? Certainly this would seem to be a possibility.

-   Ensure all errors are reported during discovery. Right now, we typically
    report the first error and then bail. The following cases need to be
    handled:
    -   Processing object methods
    -   Parsing a directory's setup.php

-   Rename setup/teardown_class, since these methods are actually operating on
    instantiated class instances


Future
------
-   Distribute EasyTest as a single executable (Phar?)

-   Add support for config files(?)

-   Implement additional CLI options(?)
    -   specify a config file
    -   reverse report output

-   Add additional verbosity level? The bulk of our discovery tests works by
    generating output and then checking for it in the test log, which seems a
    little janky
    -   Actually we probably want to implement additional debugging logging
        events that we can then inspect with a debugging logger

-   Cache results of directory (and file?) discovery

-   diff: Limit number of lines that are reported before and after the
    differing portion of text

-   Implement "loose" diff/variable formatting for "loose" (==) comparisons?

-   Niggles to test/check:

    -   What happens if we try to tokenize an empty file?

    -   Do we properly handle directories whose name matches against file name
        patterns?

    -   Do we properly handle traversing towards a target that may have a
        potentially ambiguous directory name in the path? E.g., the target is
        in "tests/test_foobar/test_target.php" and the test suite also has the
        directory "tests/test_foo" (which may or may not also include a file
        "test_target.php")

-   Only determine the test root once. Currently, we determine a new root for
    every provided path, which means we could run potentially try to run tests
    from completely unrelated test suites. This could be problematic, e.g., we
    could have name collisions between the test suites.

    -   Fixing this introduces a new niggle: handling an individual path
        that falls outside of the determined root

-   Compress the token-processing loops in _parse_setup and _discover_file?

-   Support PHP >= 5.3(?)
    -   Short array syntax ([]) isn't supported
    -   Closures don't have access to $this

-   Ensure we're UTF-8 conformant
    https://www.php.net/manual/en/migration71.windows-support.php#migration71.windows-support.long-and-utf8-path


Wishlist / Someday
------------------
-   Implement data generators/subtests

-   Improve diff algorithm
    -   "a high-performance library in multiple languages that manipulates
        plain text"
        https://github.com/google/diff-match-patch

    -   "Utility to do an N-way diff and N-way merge, for N > 2"
        https://github.com/Quuxplusone/difdef

-   Support calling assert() with arbitrary exceptions in PHP >= 7? It's not
    entirely clear what this would even entail: perhaps allow for outputting
    custom types of errors/failures?
