TODO
====

This file lists all tasks required for the next release. Items that might be
desirable for future releases may be listed at the bottom of the file.


Release
-------
-   Review test suite

-   Niggles to test/check:

    -   What happens if we try to tokenize an empty file?

    -   Do we properly handle directories whose name matches against file name
        patterns?

    -   Do we properly handle traversing towards a target that may have a
        potentially ambiguous directory name in the path? E.g., the target is
        in "tests/test_foobar/test_target.php" and the test suite also has the
        directory "tests/test_foo" (which may or may not also include a file
        "test_target.php")

    -   Do we not discover/traverse symbolic links?

    -   Do we handle traversing multiple times to a directory, file, etc. that
        had a setup error?

    -   (Directory) setup errors when there are targets

    -   Running targets that are a directory or a file that is parameterized
        with multiple argument lists, and/or in a directory hierarchy where
        one or more directories in the hierarchy are parameterized with
        multiple argument lists

    -   Accessing unset dependency state

    -   Test argument lists returned by setup_directory()

-   Clean up targets:

    -   find_class_target: don't use 'method_exists' to check if a target
        exists because this will cause non-test methods to be found as targets

    -   Allow namespaces for user-provided function and class targets to be
        automatically discovered so they don't need to be specified on the
        command line. This will probably require caching the list of declared
        namespaces within a file test

    -   User targets only need to be found/validated once during discovery and
        not every time a test is run. Targets built from dependencies should
        never need to be found/validated since they should always be valid

    -   Show a notice when duplicate user-provided targets are removed?

    -   Currently, invalid class and function targets can be ignored if it's
        determined they would just be duplicates. However, we may want to at
        least parse and validate them and exit on any errors

    -   Class and function targets should be found without regard to case
        since PHP identifiers are case-insensitive. Presumably, this isn't an
        issue with paths since we're validating all user-provided paths with
        realpath()?

-   Fix run names so that they don't have to start with a space

-   Cleanup parameters to setup(), teardown(), run() test methods

-   Add support for config files(?)

-   Implement additional CLI options(?)
    -   specify a config file
    -   reverse report output
    -   enable/disable autoloading, and specify an autoloader file location?

-   Ensure we're UTF-8 conformant
    https://www.php.net/manual/en/migration71.windows-support.php#migration71.windows-support.long-and-utf8-path

-   Migrate from Travis to GitHub Actions

-   Test PHP 8 support

-   Replace switches with if statements (to enforce strict comparison)

-   Clean up diff and formatting

    -   The code seems to work, but it's hella inefficient. As one example,
        the LCS matrix is calculated twice when comparing composite
        sub-values: once to determine the LCS for the comparison and again to
        generate the diff. Many things like this can probably be cleaned up
        and made more efficient, and the code can perhaps be better organized

        -   Do we want to split up formatting and diff (and perhaps additional
            "utility" functions) into separate files?

    -   Fix diff formatting:

        -   Ensure that values formatted in whole by format_variable() match
            how values are formatted when individual elements are diffed

        -   Fix string formatting:
            -   Don't show diffed, multiline strings as individual strings
            -   String formatting within other composite values is broken:
                -   Keys are not shown
                -   Indentation is wrong

        -   Review/fix array formatting:
            -   We lost the commas that separate array elements. Do we want
                them back?

        -   Fix object formatting:
            -   Equal but non-identical objects need to show an instance id
            -   Objects whose individual elements have been diffed are
                formatted like arrays

        -   Fix reference formatting. Right now, an extra level of recursion
            is printed because values call a general-purpose formatting
            function, which needs to see (and thus format) the value once
            before detecting the recursion. The probable fix is: once we've
            processed the values, we know what we have, and so we can
            specialize formatting based on the type of value

    -   Implement "loose" (==) comparison

    -   By default, don't treat numerical array keys as significant when
        comparing arrays. This can give us cleaner diffs, since an insert or
        deletion won't cause all the subsequent, reindexed elements to show as
        having been changed. The user should be able to override this so that
        keys are always considered significant

    -   Since we can now support loose comparison, can we incorporate
        the fact that array key order isn't significant without explicitly
        ordering the array? Even if we can't, do we want arrays to be
        automatically sorted as part of generating the diff instead of
        depending on having sorted arrays passed in?

    -   When formatting array and class "headers", it seems we could have a
        non-compact diff if both the keys of the header and initial values are
        different:
            - 1 => array(
            + 2 => array(
            -   1 => 'foo',
            +   1 => 'bar',
        Is this something we want to try to "fix"?

-   Do we want/need to implement a UserError exception? E.g., we could throw
    an error from arglists() or from the ArgumentLists constructor if the
    argument is not an iterable, however the resulting error backtrace will
    originate from easytest code. A UserError would need to remove calls
    within EasyTest from the generated backtrace (like Failure and Skip do)

-   Any event that is logged using a string as the reason (as opposed to using
    an exception as the reason) will not have a backtrace identifying the
    source file name and line number. To the extent that it's possible, we
    probably want to always log an event using an exception as the reason.

-   Should we strip assert() calls (and potentially other debug activity) when
    building the phar? Since easytest requires assertions to be enabled, they
    will always be executed even though we would never expect them to trigger
    in a production release. If so, then we probably want to allow the phar
    version to be installable with Composer (a la psalm/phar, for example)

-   Add typehints:
    -   buffer.php
    -   dependency.php
    -   discover.php
    -   exceptions.php
    -   log.php
    -   main.php
    -   output.php
    -   run.php
    -   targets.php
    -   tests.php
    -   util.php

-   The comparison assertions ('<', '<=', '>', '>=') can operate
    (successfully) on (some) composite values. What implications does this
    have on formatting failure messages?
    https://www.php.net/manual/en/language.operators.comparison.php

-   Don't trim displayed output that is captured during testing


Future / Wishlist
-----------------
-   Improve diff algorithm
    -   "a high-performance library in multiple languages that manipulates
        plain text"
        https://github.com/google/diff-match-patch

    -   "Utility to do an N-way diff and N-way merge, for N > 2"
        https://github.com/Quuxplusone/difdef

    -   Limit number of lines that are reported before and after the differing
        portion of text?

-   Support calling assert() with arbitrary exceptions in PHP >= 7? It's not
    entirely clear what this would even entail: perhaps allow treating custom
    exceptions as failures instead of errors?

-   Allow targeting of a specific parameterized test run?

-   Allow test functions and function fixtures to be moved into a class and
    "just work"?

-   Support "higher-level" dependencies, i.e., declaring a dependency on an
    entire class, file, or directory, all of whose tests must pass in order
    for the dependency to be satisfied
